type Game {
	creator: User
	deck: [String!]
	discard: Discard
	id: String
	players_out: [Int!]
	state: String
	turn: Int
	users: [User!]
	players: [Player!]
}

type Cards {
	hand: [String!]
	face_up: [String!]
	face_down: [String!]
}

type Discard {
	current_value: String
	current_card: String
	id: String
	repeat_count: Int
	cards: [String!]
}

type Player {
	id: String
	turn: Int
	cards: Cards
	user: User
}

type User {
	id: String
	name: String
}

type Mutation {
	createGame(in: CreateGameRequestInput): Game # Update the return for this mutation to ID or actually put the values
	startGame(in: StartGameRequestInput): Boolean
	createUser(in: CreateUserRequestInput): ID
	joinGame(in: JoinGameRequestInput): Boolean
	# play(in: PlayRequestInput): PlayResponse
}

type Query {
	getGame(id: ID): Game
	getDiscard(game_id: ID): Discard
	getUser(id: ID): User
	getPlayer(user_id: ID, game_id: ID): Player
	getOponents(player_id: ID, game_id: ID): [Player]
}

input CreateGameRequestInput {
	creatorId: String
}

input CreateUserRequestInput {
	name: String
}

input JoinGameRequestInput {
	userId: String
	gameId: String
}

# input PlayRequestInput {
# 	playerId: String
# 	cards: [String!]
# }

# type PlayResponse {
# 	cards: [String!]
# 	turnEnded: Boolean
# 	message: String
# }

input StartGameRequestInput {
	userId: String
	gameId: String
}
