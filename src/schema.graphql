# type Game {
# 	creator: User
# 	deck: [String!]
# 	discard: Discard
# 	id: String
# 	playersOut: [Int!]
# 	state: String
# 	turn: Int
# 	users: [User!]
# }

# type Cards {
# 	hand: [String!]
# 	faceUp: [String!]
# 	faceDown: [String!]
# }

# type Discard {
# 	currentValue: String
# 	currentCard: String
# 	id: String
# 	repeatCount: Int
# 	cards: [String!]
# }

# type Player {
# 	id: String
# 	turn: Int
# 	cards: Cards
# 	user: User
# }

type User {
	id: String
	name: String
}

type Mutation {
	# createGame(in: CreateGameRequestInput): Game
	# startGame(in: StartGameRequestInput): Boolean
	createUser(in: CreateUserRequestInput): ID
	# joinGame(in: JoinGameRequestInput): Boolean
	# play(in: PlayRequestInput): PlayResponse
}

type Query {
	# getGame(id: ID!): Game
	# getDiscard(game_id: ID!): Discard
	getUser(id: ID): User
	# getPlayer(user_id: ID!, game_id: ID!): Player
	# getOponents(player_id: ID!, game_id: ID!): [Player]
}

# input CreateGameRequestInput {
# 	creator: String
# }

input CreateUserRequestInput {
	name: String
}

# input JoinGameRequestInput {
# 	userId: String
# 	gameId: String
# }

# input PlayRequestInput {
# 	playerId: String
# 	cards: [String!]
# }

# type PlayResponse {
# 	cards: [String!]
# 	turnEnded: Boolean
# 	message: String
# }

# input StartGameRequestInput {
# 	userId: String
# 	gameId: String
# }
